variables:
  PROJECT_SSH: "git@github.lan:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git"
  REMOTE_SSH:  "git@github.com:mambaru/${CI_PROJECT_NAME}.git"
  DEVEL_DENY: "false"

# master
# release-0.8
# pre-release
# devel
# wip-devel

before_script:
  - export LC_ALL='ru_RU.UTF-8'
  - export LANG='ru_RU.UTF-8'
  - export RELEASE_BRANCH="$(python3 ./.ci/wamba-ci.py get release release-0.8)"
  - export RELEASE_TAG="$(python3 ./.ci/wamba-ci.py get tag 0.8.0)"
  - export DEPLOY_STANDARD="$(python3 ./.ci/wamba-ci.py get deploy.standard 11)"
  - export DEPLOY_COMPILER="$(python3 ./.ci/wamba-ci.py get deploy.compiler g++)"
  - export DEPLOY_PREF="${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${DEPLOY_COMPILER}${DEPLOY_STANDARD}"
  - echo "RELEASE_BRANCH=${RELEASE_BRANCH}"
  - git checkout ${CI_COMMIT_REF_NAME}
  - git pull ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}
  - git submodule deinit --force .
  - git submodule sync
  - git submodule update --init

after_script:
  - rm -f /tmp/migrate-${CI_JOB_ID}.sh
  - rm -f /tmp/export-${CI_JOB_ID}.sh

stages:
  - build
  - check
  - merge
  - clean
  - publish
  - deploy
  
  
night-build:
  stage: build
  script:
    - git pull origin devel
    - git pull origin wip-devel
    - rm -f update.sh
    - wget http://github.lan/cpp/cmake-ci/raw/master/update.sh
    - bash update.sh "Night build&#58; "
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_NAME}
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:wip-devel
  only:
    - night-build

basic-build:
  stage: build
  script:
    - ./.ci/wip-build.sh
  only:
    - /^devel-.*$/
    - /^hotfix-.*$/

wip-build:
  stage: build
  script:
    - ./.ci/wip-build-and-test.sh
  only:
    - wip-devel

main-build:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 Release
  only:
    - devel
    - pre-release
    - /^build.*$/

build-g++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 Debug
  only:
    - /^build.*$/
    - pre-release

build-g++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 14 Release
    - ./.ci/build-and-test.sh g++ 14 Debug
  only:
    - /^build.*$/
    - pre-release

build-g++17:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 17 Release
    - ./.ci/build-and-test.sh g++ 17 Debug
  only:
    - /^build.*$/
    - pre-release

    
build-clang++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 11 Release
    - ./.ci/build-and-test.sh clang++ 11 Debug
  only:
    - /^build.*$/
    - pre-release

build-clang++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 14 Release
    - ./.ci/build-and-test.sh clang++ 14 Debug
  only:
    - /^build.*$/
    - pre-release

build-clang++17:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 17 Release
    - ./.ci/build-and-test.sh clang++ 17 Debug
  only:
    - /^build.*$/
    - pre-release

#
# ###########################################
# 

cppcheck:
  stage: check
  script:
    - ./.ci/cppcheck-ci.sh --std=c++11
    - ./.ci/cppcheck-ci.sh --std=c++14
  only:
    - /^check.*$/
    - pre-release
    
#
# ###########################################
# 

devel-wip:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh devel false
  only:
    - wip-devel

devel-any:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN}
    - ./.ci/automr.sh wip-devel true
  only:
    - /^devel-.*$/
    
pre-release:
  stage: merge
  script:
    - echo git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:pre-release
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:pre-release
  only:
    - devel

master-release:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL} 
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master false
  only:
    - pre-release

master-hotfix:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master true
  only:
    - /^hotfix-.*$/

release:
  stage: merge
  script:
    - echo "RELEASE_BRANCH=${RELEASE_BRANCH}"
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:${RELEASE_BRANCH}
  only:
    - master

    
deploy-Release-static:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-static-Release-production.tar.gz"
      - "${DEPLOY_PREF}-static-Release-stress.tar.gz"
      - "${DEPLOY_PREF}-static-Release-loads.tar.gz"
      - "${DEPLOY_PREF}-static-Release-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh Release static
  only:
    - /^release-.*$/

deploy-Release-shared:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-shared-Release-production.tar.gz"
      - "${DEPLOY_PREF}-shared-Release-stress.tar.gz"
      - "${DEPLOY_PREF}-shared-Release-loads.tar.gz"
      - "${DEPLOY_PREF}-shared-Release-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh Release shared
  only:
    - /^release-.*$/
    
deploy-RelWithDebInfo-static:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-static-RelWithDebInfo-production.tar.gz"
      - "${DEPLOY_PREF}-static-RelWithDebInfo-stress.tar.gz"
      - "${DEPLOY_PREF}-static-RelWithDebInfo-loads.tar.gz"
      - "${DEPLOY_PREF}-static-RelWithDebInfo-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh RelWithDebInfo static
  only:
    - /^release-.*$/

deploy-RelWithDebInfo-shared:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-shared-RelWithDebInfo-production.tar.gz"
      - "${DEPLOY_PREF}-shared-RelWithDebInfo-stress.tar.gz"
      - "${DEPLOY_PREF}-shared-RelWithDebInfo-loads.tar.gz"
      - "${DEPLOY_PREF}-shared-RelWithDebInfo-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh RelWithDebInfo shared
  only:
    - /^release-.*$/

deploy-Debug-static:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-static-Debug-production.tar.gz"
      - "${DEPLOY_PREF}-static-Debug-stress.tar.gz"
      - "${DEPLOY_PREF}-static-Debug-loads.tar.gz"
      - "${DEPLOY_PREF}-static-Debug-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh Debug static
  only:
    - /^release-.*$/

deploy-Debug-shared:
  stage: deploy
  artifacts:
    paths:
      - "${DEPLOY_PREF}-shared-Debug-production.tar.gz"
      - "${DEPLOY_PREF}-shared-Debug-stress.tar.gz"
      - "${DEPLOY_PREF}-shared-Debug-loads.tar.gz"
      - "${DEPLOY_PREF}-shared-Debug-devel.tar.gz"
    expire_in: 1 week
  script:
    - ./.ci/build-and-deploy.sh Debug shared
  only:
    - /^release-.*$/

delete-branches:
  stage: clean
  script:
    - git push ${PROJECT_SSH} :${CI_COMMIT_REF_NAME}
  only:
    - /^build.*$/
    - /^check.*$/
push-to-github:
  stage: publish
  only:
    - master
    
  script:
    - git tag -f ${RELEASE_TAG}
    - git push -f --tags ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}
    - if [[ "$(python3 ./.ci/wamba-ci.py enabled public)" == "1" ]]; then
    -   cp "./external/cmake-ci/migrate.sh" "/tmp/migrate-${CI_JOB_ID}.sh"
    -   cp "./external/cmake-ci/export.sh" "/tmp/export-${CI_JOB_ID}.sh"
    -   git branch -f mambaru
    -   git checkout mambaru
    -   git rm -rf .ci
    -   git rm .gitlab-ci.yml
    -   git rm wamba-ci.json
    -   /tmp/migrate-${CI_JOB_ID}.sh https://github.com/mambaru/cmake-ci.git
    -   /tmp/export-${CI_JOB_ID}.sh ${REMOTE_SSH}
    - fi
